// getFrequencies
//
// Takes a (possibly nested) array of values.
// Returns a JSON object of key value pairs representing the number of times each value appears in the original array

var flattenArray = require('flattenArray');

function sortByKey(array, key) {
    return array.sort(function(a, b) {
        var x = a[key]; var y = b[key];
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });
}

var getFrequencies = function(array){
	
	// Flatten array
	var flattened = flattenArray(array);

	// Calculate frequencies		
    var frequencies = {} ;
	for(i = 0; i < flattened.length; ++i) {
    	if(!frequencies[flattened[i]])
        	frequencies[flattened[i]] = 0;
    	++frequencies[flattened[i]];
	}

	// Create key/value pair version
	var newfreqs = [];
	for (var key in frequencies) {
	   if (frequencies.hasOwnProperty(key) ){
	        var item = {};
			item.name = key;
			item.freq = frequencies[key]
			newfreqs.push(item);
	   }
	}

	// Sort by frequency, descending
	newfreqs = sortByKey(newfreqs, 'freq').reverse();

	// Clean up and convert back to JSON
	var jsonString = JSON.stringify(newfreqs);
	return JSON.parse(jsonString);
}

module.exports = getFrequencies;